import os
import openai
from pytube import YouTube
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM


# Load your API key from an environment variable or secret management service
openai.api_key = os.getenv("OPENAI_API_KEY")
OUTPUT_PATH = "../data"


def download_audio_from_url(url):
    '''
        Extracts and downloads the audio of the YouTube video in the URL.

        Parameters
        ----------
        url : str
            URL of the YouTube video.

        Returns
        -------
        str
            The title of the YouTube video, which is also de name of the downloaded MP3 file.
    '''
    # Create a YouTube object from the URL
    yt_video = YouTube(url)

    # Get the audio stream
    audio_stream = yt_video.streams.filter(only_audio=True).first()

    # Download the audio stream
    filename = f"{yt_video.title}.mp3"
    audio_stream.download(output_path=OUTPUT_PATH, filename=filename)

    return yt_video.title


def get_audio_transcript(url, language='', translation=False):
    '''
        Uses OpenAI API to get the transcript of a YouTube video in a URL.

        Parameters
        ----------
        url : str
            URL of the YouTube video.
        language : str
            Original language of the YouTube video. Defaults to blank. Allowed values: en, es, [blank]
        translation : boolean
            True if we want the transcript to be translated to English regardless of the original language.

        Returns
        -------
        str
            The transcript of the YouTube video in a URL.
    '''
    filename = download_audio_from_url(url)

    with open(f"{OUTPUT_PATH}/{filename}.mp3", "rb") as audio_file:
        if translation:
            transcript = openai.Audio.translate("whisper-1", audio_file)
        else:
            transcript = openai.Audio.transcribe("whisper-1", audio_file, language=language) if language else\
                openai.Audio.transcribe("whisper-1", audio_file)

    return transcript.text


def get_chatGPT_response(url, language, prompt, model):
    '''
        Generates the transcript of the YouTube video in the URL and passes it to ChatGPT along with a user's prompt.

        Parameters
        ----------
        url : str
            URL of the YouTube video.
        language : str
            Original language of the YouTube video. Defaults to blank. Allowed values: en, es, [blank]
        prompt : str
            The user's prompt that tells ChatGPT what to do with the transcript generated.
        model : str
            The language model version of ChatGPT. Allowed values: gpt-3.5-turbo, gpt-4

        Returns
        -------
        str
            The response generated by ChatGPT.
    '''
    transcript = get_audio_transcript(url, language, translation=False)

    # Send the transcript along with the user's prompt to ChatGPT
    res = openai.ChatCompletion.create(model=model,
                                       messages=[{
                                           "role": "system",
                                           "content": "You are ChatGPT, a large language model trained by OpenAI. Answer as concisely as possible."
                                       },
                                       {
                                           "role": "user",
                                           "content": f"{prompt} {transcript}"
                                       }])

    return res['choices'][0]['message']['content']


def get_summary(url, language, min_length, max_length, tokenizer, model):
    '''
        Extracts and downloads the audio of the YouTube video in the URL.

        Parameters
        ----------
        url : str
            URL of the YouTube video.
        language : str
            Original language of the YouTube video. Defaults to blank. Allowed values: en, es, [blank]
        min_length : int
            The minimum length of the summary to be generated.
        max_length : int
            The maximum length of the summary to be generated.
        tokenizer : transformers.Tokenizer
            A tokenizer object associated with the model.
        model : transformers.Model
            A model object to be used for summarization.

        Returns
        -------
        str
            The summary generated by the model.
    '''
    if language == 'en':
        transcript = get_audio_transcript(url, language, translation=False)
    else:
        transcript = get_audio_transcript(url, language, translation=True)

    tokenized_text = tokenizer.encode(transcript, truncation=True, return_tensors='pt')
    summary_ids = model.generate(tokenized_text, min_length=min_length, max_length=max_length)
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)

    return summary
